/**
 *
 * @author Gaurab Pradhan
 */
package SC_IM_DP;

import bean.DistBean;
import bean.TrainingBean;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.io.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import util.DBConnection;
import util.PropertiesUtil;

public class HDXFrame extends javax.swing.JFrame {

    String name;

    public HDXFrame() {
        initComponents();
        clock();
    }

    public void clock() {
        Thread clock = new Thread() {
            public void run() {
                while (true) {
                    try {
                        DateFormat df = new SimpleDateFormat("HH:mm:ss");
                        DateFormat df1 = new SimpleDateFormat("MMMM yyyy");
                        Calendar calobj = Calendar.getInstance();
                        lblTime.setText(df.format(calobj.getTime()));
                        lblDate.setText(df1.format(calobj.getTime()));
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        clock.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        HeaderLabel = new javax.swing.JLabel();
        LeftPanel = new javax.swing.JPanel();
        lblWelcome = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jDayChooser1 = new com.toedter.calendar.JDayChooser();
        RightPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pathTextTemp = new javax.swing.JTextField();
        pathTextOutput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnBrowseTemp = new javax.swing.JButton();
        btnBrowseOutput = new javax.swing.JButton();
        btnGenHDX = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputLog = new javax.swing.JTextArea();
        MenuPanel = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shelter Cluster");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setResizable(false);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));

        HeaderLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/header.png"))); // NOI18N

        LeftPanel.setBackground(new java.awt.Color(255, 255, 255));
        LeftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        lblWelcome.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/sc_icon.png"))); // NOI18N
        lblWelcome.setPreferredSize(new java.awt.Dimension(92, 15));

        lblTime.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 51, 0));
        lblTime.setText("Time");
        lblTime.setPreferredSize(new java.awt.Dimension(92, 15));

        lblDate.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 51, 0));
        lblDate.setText("Date");
        lblDate.setPreferredSize(new java.awt.Dimension(92, 15));

        jDayChooser1.setBackground(new java.awt.Color(255, 255, 255));
        jDayChooser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout LeftPanelLayout = new javax.swing.GroupLayout(LeftPanel);
        LeftPanel.setLayout(LeftPanelLayout);
        LeftPanelLayout.setHorizontalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addComponent(jDayChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LeftPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)))
                .addGap(21, 21, 21))
        );
        LeftPanelLayout.setVerticalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDayChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        LeftPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblDate, lblTime});

        RightPanel.setBackground(new java.awt.Color(223, 222, 222));
        RightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SC IM Data Processing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 11))); // NOI18N
        RightPanel.setPreferredSize(new java.awt.Dimension(603, 389));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Select HDX Template");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Output Path");

        btnBrowseTemp.setText("Browse");
        btnBrowseTemp.setOpaque(false);
        btnBrowseTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTempActionPerformed(evt);
            }
        });

        btnBrowseOutput.setText("Browse");
        btnBrowseOutput.setOpaque(false);
        btnBrowseOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseOutputActionPerformed(evt);
            }
        });

        btnGenHDX.setText("Generate HDX");
        btnGenHDX.setOpaque(false);
        btnGenHDX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenHDXActionPerformed(evt);
            }
        });

        outputLog.setColumns(20);
        outputLog.setRows(5);
        jScrollPane3.setViewportView(outputLog);

        javax.swing.GroupLayout RightPanelLayout = new javax.swing.GroupLayout(RightPanel);
        RightPanel.setLayout(RightPanelLayout);
        RightPanelLayout.setHorizontalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RightPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pathTextTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(RightPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pathTextOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBrowseTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBrowseOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(btnGenHDX, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RightPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        RightPanelLayout.setVerticalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(pathTextTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pathTextOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(RightPanelLayout.createSequentialGroup()
                        .addComponent(btnBrowseTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowseOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnGenHDX, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        MenuPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnHome.setBackground(new java.awt.Color(255, 255, 255));
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/home.png"))); // NOI18N
        btnHome.setToolTipText("Home");
        btnHome.setBorder(null);
        btnHome.setBorderPainted(false);
        btnHome.setFocusPainted(false);
        btnHome.setOpaque(false);
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/exit.png"))); // NOI18N
        btnExit.setToolTipText("Exit");
        btnExit.setBorder(null);
        btnExit.setBorderPainted(false);
        btnExit.setFocusPainted(false);
        btnExit.setOpaque(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuPanelLayout = new javax.swing.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHome)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MenuPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnHome});

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeaderLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 34, Short.MAX_VALUE))
        );

        MainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {LeftPanel, RightPanel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(894, 597));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        dispose();
        new HomePage().setVisible(true);
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBrowseTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTempActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setMultiSelectionEnabled(false);
        int option = jfc.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            filePathTemplate = file.getPath();
            pathTextTemp.setText(filePathTemplate);
        } else if (option == JFileChooser.CANCEL_OPTION) {
            System.out.println(" User cancelled operation. No file was chosen.");
        }
    }//GEN-LAST:event_btnBrowseTempActionPerformed

    private void btnBrowseOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseOutputActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String selectedPath = chooser.getSelectedFile().toString();
            pathTextOutput.setText(selectedPath);
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btnBrowseOutputActionPerformed

    private void btnGenHDXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenHDXActionPerformed
        btnGenHDX.setEnabled(false);
        filePathTemplate = pathTextTemp.getText();
        filePathOutput = pathTextOutput.getText() + "\\";
        if (filePathTemplate != "" && filePathOutput != "\\") {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            task = new Task();
//        task.addPropertyChangeListener(this);
            task.execute();
        } else {
            System.out.println("empty");
            JOptionPane.showMessageDialog(null, "Some fields are empty!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
            btnGenHDX.setVisible(true);
            dispose();
            try {
                new SplitFrame().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnGenHDXActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HDXFrame().setVisible(true);
            }
        });
    }

    class Task extends SwingWorker<Void, Void> {

        /**
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            try {
                getDataForHDX();
                return null;
            } catch (Exception ex) {
                Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;
        }

        /**
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            btnGenHDX.setEnabled(true);
            setCursor(null); // turn off the wait cursor
        }

        private void getDataForHDX() throws Exception {
            con = DBConnection.getConnection();
            try {
                if (con != null) {
                    List<DistBean> distList = getDistData(con);
                    List<TrainingBean> trainList = getTrainData(con);
                    System.out.println("Processing to generate HDX DB");
                    outputLog.append("Database Connection Established \n");
                    outputLog.append("Processing to generate HDX DB \n");
                    if (distList.size() > 0) {
                        writeToHDXExcle(distList, trainList, filePathTemplate, filePathOutput);
                    } else {
                        System.out.println("Distribution Sheet is Empty.");
                        outputLog.append("Distribution Sheet is Empty.\n");
                    }
                    distList = null;
                    trainList = null;
                } else {
                    System.out.println("Failed to make connection!");
                    JOptionPane.showMessageDialog(null, "Failed to connect to Database!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, e);
                }
            }
        }

        private List<DistBean> getDistData(Connection con) {
            List<DistBean> mList = new ArrayList<DistBean>();
            Statement stmt = null;
            try {
                String query = "SELECT *  FROM " + PropertiesUtil.getDbTable() + " ORDER BY imp_agency ASC";
                stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    DistBean bean = new DistBean();
                    //first
                    String priority = rs.getString(1);
                    if (priority.toUpperCase().equals("TRUE")) {
                        bean.setPriority("Priority");
                    } else {
                        bean.setPriority("");
                    }
                    bean.setAccessMethods(rs.getString(2));
                    bean.setHub(rs.getString(3));
                    bean.setLastUpdate(rs.getString(4));
                    bean.setDistrictHLCITCode(rs.getString(5));
                    bean.setVDCHLCITCode(rs.getString(6));
//                bean.setPriority(rs.getString(7));
                    //Who
                    bean.setImplementingAgency(rs.getString(8));
                    bean.setSourcingAgency(rs.getString(9));
                    bean.setLocalPartnerAgency(rs.getString(10));
                    bean.setContactName(rs.getString(11));
                    bean.setContactEmail(rs.getString(12));
                    bean.setContactPhoneNumber(rs.getString(13));
//
//                    //Where
                    bean.setDistrict(rs.getString(14));
                    bean.setVDCMunicipalities(rs.getString(15));
                    bean.setMunicipalWard(rs.getString(16));
//
//                    //What
                    bean.setActionType(rs.getString(17));
                    bean.setActionDescription(rs.getString(18));
                    bean.setTargeting(rs.getString(19));
                    bean.setItems(rs.getString(20));
                    bean.setTotalNumberHouseholds(rs.getString(21));
                    bean.setAverageCostPerHouseholds(rs.getString(22));
                    bean.setFemaleHeadedHouseholds(rs.getString(23));
                    bean.setVulnerableCasteEthnicityHouseholds(rs.getString(24));

//                    //When
                    bean.setActivityStatus(rs.getString(25));
                    bean.setDDStart(rs.getString(26));
                    bean.setMMStart(rs.getString(27));
                    bean.setYYStart(rs.getString(28));
                    bean.setDDComp(rs.getString(29));
                    bean.setMMComp(rs.getString(30));
                    bean.setYYComp(rs.getString(31));
//
                    bean.setAdditionalComments(rs.getString(32));
                    mList.add(bean);
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            return mList;
        }

        private List<TrainingBean> getTrainData(Connection con) {
            List<TrainingBean> mList = new ArrayList<TrainingBean>();
            Statement stmt = null;
            try {
                String query = "SELECT *  FROM " + PropertiesUtil.getDbTable1() + " ORDER BY imp_agency ASC";
                stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    TrainingBean bean = new TrainingBean();
                    //first
                    String priority = rs.getString(1);
                    if (priority.toUpperCase().equals("TRUE")) {
                        bean.setPriority("Priority");
                    } else {
                        bean.setPriority("");
                    }
                    bean.setAccessMethods(rs.getString(2));
                    bean.setHub(rs.getString(3));
                    bean.setLastUpdate(rs.getString(4));
                    bean.setDistrictHLCITCode(rs.getString(5));
                    bean.setVDCHLCITCode(rs.getString(6));
//                //Who
                    bean.setImplementingAgency(rs.getString(8));
                    bean.setSourcingAgency(rs.getString(9));
                    bean.setLocalPartnerAgency(rs.getString(10));
                    bean.setContactName(rs.getString(11));
                    bean.setContactEmail(rs.getString(12));
                    bean.setContactPhoneNumber(rs.getString(13));
//                
//               //Where
                    bean.setDistrict(rs.getString(14));
                    bean.setVDCMunicipalities(rs.getString(15));
                    bean.setMunicipalWard(rs.getString(16));
//
//                //What
                    bean.setTrainingSub(rs.getString(17));
                    bean.setAudience(rs.getString(18));
                    bean.setTrainingTitle(rs.getString(19));
                    bean.setDemonstrationConstructionIncluded(rs.getString(20));
                    bean.setIECMaterialsDistributed(rs.getString(21));
                    bean.setDurationofeachsession(rs.getString(22));//in hours	
                    bean.setAmountPaidtoParticipants(rs.getString(23)); //NRP per participants	
                    bean.setTotalCostPerTraining(rs.getString(24));
                    bean.setTotalParticipants(rs.getString(25));
                    bean.setMales(rs.getString(26));
                    bean.setFemales(rs.getString(27));
                    bean.setThirdGender(rs.getString(28));
                    bean.setElderly(rs.getString(29));//60+
                    bean.setChildren(rs.getString(30));//u18	
                    bean.setPersonswithDisabilities(rs.getString(31));
                    bean.setVulnerableCasteorEthnicity(rs.getString(32));
                    bean.setFemaleHH(rs.getString(33));
//                //When
                    bean.setActivityStatus(rs.getString(34));
                    bean.setDDStart(rs.getString(35));
                    bean.setMMStart(rs.getString(36));
                    bean.setYYStart(rs.getString(37));
                    bean.setDDComp(rs.getString(38));
                    bean.setMMComp(rs.getString(39));
                    bean.setYYComp(rs.getString(40));

                    bean.setAdditionalComments(rs.getString(41));
                    mList.add(bean);
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(HDXFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            return mList;
        }

        private void writeToHDXExcle(List<DistBean> distList, List<TrainingBean> trainList, String filePathTemplate, String filePathOutput) throws Exception {
            InputStream file = new FileInputStream(filePathTemplate);
            Workbook workbook = WorkbookFactory.create(file);
            org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(0);
            int rowIndex = 1;
            for (DistBean bean : distList) {
                Row row = sheet.createRow(rowIndex);
                row.createCell(0).setCellValue(bean.getPriority());
                row.createCell(1).setCellValue(bean.getAccessMethods());
                row.createCell(2).setCellValue(bean.getHub());
                row.createCell(3).setCellValue(bean.getLastUpdate());
                row.createCell(4).setCellValue(bean.getDistrictHLCITCode());
                row.createCell(5).setCellValue(bean.getVDCHLCITCode());
                //who
                row.createCell(6).setCellValue(bean.getImplementingAgency());
                row.createCell(7).setCellValue(bean.getSourcingAgency());
                row.createCell(8).setCellValue(bean.getLocalPartnerAgency());
//            row.createCell(3).setCellValue(bean.getContactName());
//            row.createCell(4).setCellValue(bean.getContactEmail());
//            row.createCell(5).setCellValue(bean.getContactPhoneNumber());
                //where
                row.createCell(9).setCellValue(bean.getDistrict());
                row.createCell(10).setCellValue(bean.getVDCMunicipalities());
                row.createCell(11).setCellValue(bean.getMunicipalWard());
                //What
                row.createCell(12).setCellValue(bean.getActionType());
                row.createCell(13).setCellValue(bean.getActionDescription());
                row.createCell(14).setCellValue(bean.getTargeting());
                row.createCell(15).setCellValue(bean.getItems());
                row.createCell(16).setCellValue(bean.getTotalNumberHouseholds());
                row.createCell(17).setCellValue(bean.getAverageCostPerHouseholds());
                row.createCell(18).setCellValue(bean.getFemaleHeadedHouseholds());
                row.createCell(19).setCellValue(bean.getVulnerableCasteEthnicityHouseholds());
//                    //When
                row.createCell(20).setCellValue(bean.getActivityStatus());
//            row.createCell(18).setCellValue(bean.getStartDate());
//            row.createCell(19).setCellValue(bean.getCompletionDate());
//            row.createCell(20).setCellValue(bean.getAdditionalComments());
                if (bean.getDDStart() == null) {
                    row.createCell(21).setCellValue("");
                } else {
                    row.createCell(21).setCellValue(bean.getDDStart() + "/" + bean.getMMStart() + "/" + bean.getYYStart());
                }
                if (bean.getDDComp() == null) {
                    row.createCell(22).setCellValue("");
                } else {
                    row.createCell(22).setCellValue(bean.getDDComp() + "/" + bean.getMMComp() + "/" + bean.getYYComp());
                }
                row.createCell(23).setCellValue(bean.getAdditionalComments());
                rowIndex++;
            }
            //Trainings
            org.apache.poi.ss.usermodel.Sheet sheetT = workbook.getSheetAt(1);
            rowIndex = 1;
            for (TrainingBean bean : trainList) {
                Row row = sheetT.createRow(rowIndex);
                row.createCell(0).setCellValue(bean.getPriority());
                row.createCell(1).setCellValue(bean.getAccessMethods());
                row.createCell(2).setCellValue(bean.getHub());
                row.createCell(3).setCellValue(bean.getLastUpdate());
                row.createCell(4).setCellValue(bean.getDistrictHLCITCode());
                row.createCell(5).setCellValue(bean.getVDCHLCITCode());
////            //who
                row.createCell(6).setCellValue(bean.getImplementingAgency());
                row.createCell(7).setCellValue(bean.getSourcingAgency());
                row.createCell(8).setCellValue(bean.getLocalPartnerAgency());
//            row.createCell(3).setCellValue(bean.getContactName());
//            row.createCell(4).setCellValue(bean.getContactEmail());
//            row.createCell(5).setCellValue(bean.getContactPhoneNumber());
////            //where
                row.createCell(9).setCellValue(bean.getDistrict());
                row.createCell(10).setCellValue(bean.getVDCMunicipalities());
                row.createCell(11).setCellValue(bean.getMunicipalWard());
////            //What
                row.createCell(12).setCellValue(bean.getTrainingSub());
                row.createCell(13).setCellValue(bean.getAudience());
                row.createCell(14).setCellValue(bean.getTrainingTitle());
                row.createCell(15).setCellValue(bean.getDemonstrationConstructionIncluded());
                row.createCell(16).setCellValue(bean.getIECMaterialsDistributed());
                row.createCell(17).setCellValue(bean.getDurationofeachsession());
                row.createCell(18).setCellValue(bean.getAmountPaidtoParticipants());
                row.createCell(19).setCellValue(bean.getTotalCostPerTraining());
                row.createCell(20).setCellValue(bean.getTotalParticipants());
                row.createCell(21).setCellValue(bean.getMales());
                row.createCell(22).setCellValue(bean.getFemales());
                row.createCell(23).setCellValue(bean.getThirdGender());
                row.createCell(24).setCellValue(bean.getElderly());
                row.createCell(25).setCellValue(bean.getChildren());
                row.createCell(26).setCellValue(bean.getPersonswithDisabilities());
                row.createCell(27).setCellValue(bean.getVulnerableCasteorEthnicity());
                row.createCell(28).setCellValue(bean.getFemaleHH());
////                    //When
                row.createCell(29).setCellValue(bean.getActivityStatus());
                if (bean.getDDStart() == null) {
                    row.createCell(30).setCellValue("");
                } else {
                    row.createCell(30).setCellValue(bean.getDDStart() + "/" + bean.getMMStart() + "/" + bean.getYYStart());
                }
                if (bean.getDDComp() == null) {
                    row.createCell(31).setCellValue("");
                } else {
                    row.createCell(31).setCellValue(bean.getDDComp() + "/" + bean.getMMComp() + "/" + bean.getYYComp());
                }
//                row.createCell(30).setCellValue(bean.getDDStart() + "/" + bean.getMMStart() + "/" + bean.getYYStart());
//                row.createCell(31).setCellValue(bean.getDDComp() + "/" + bean.getMMComp() + "/" + bean.getYYComp());
                row.createCell(32).setCellValue(bean.getAdditionalComments());
                rowIndex++;
            }

            //Writing into excel file
            DateFormat dateFormat = new SimpleDateFormat("dd_MM_yyyy");
            Calendar cal = Calendar.getInstance();
            String todayDate = dateFormat.format(cal.getTime());

            String filePath = filePathOutput;
            File folder = new File(filePath);
            if (!folder.exists()) {
                if (folder.mkdir()) {
                    System.out.println("Directory is created!");
                } else {
                    System.out.println("Failed to create directory!");
                }
            }
            FileOutputStream fos = new FileOutputStream(filePath + "DatabaseV5.0_" + todayDate + "for HDX.xlsx");
            workbook.write(fos);
            System.out.println(filePath + "DatabaseV5.0_" + todayDate + "for HDX.xlsx");
            outputLog.append(filePath + "DatabaseV5.0_" + todayDate + "for HDX.xlsx");
            outputLog.append("\n");
            fos.close();
            final JDialog dialog = new ToastFrame(HDXFrame.this, true, "HDX File is Created");
                Timer timer = new Timer(ToastFrame.LENGTH_LONG, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        dialog.setVisible(false);
                        dialog.dispose();
                    }
                });
                timer.setRepeats(false);
                timer.start();

                dialog.setVisible(true);
        }
    }
    private Task task;
    static String filePathTemplate;
    static String filePathOutput;
    Connection con = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HeaderLabel;
    private javax.swing.JPanel LeftPanel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JPanel RightPanel;
    private javax.swing.JButton btnBrowseOutput;
    private javax.swing.JButton btnBrowseTemp;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGenHDX;
    private javax.swing.JButton btnHome;
    private com.toedter.calendar.JDayChooser jDayChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblWelcome;
    public javax.swing.JTextArea outputLog;
    private javax.swing.JTextField pathTextOutput;
    private javax.swing.JTextField pathTextTemp;
    // End of variables declaration//GEN-END:variables
}
