/**
 *
 * @author Gaurab Pradhan
 */
package SC_IM_DP;

import java.io.*;
import java.sql.*;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import util.*;
import bean.*;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

public class SplitFrame extends javax.swing.JFrame {

    String name;

    public SplitFrame() throws Exception {
        initComponents();
        clock();
        tDB = new TaskDB();
        tDB.execute();
//        fillCombo();
    }

    public void clock() {
        Thread clock = new Thread() {
            public void run() {
                while (true) {
                    try {
                        DateFormat df = new SimpleDateFormat("HH:mm:ss");
                        DateFormat df1 = new SimpleDateFormat("MMMM yyyy");
                        Calendar calobj = Calendar.getInstance();
                        lblTime.setText(df.format(calobj.getTime()));
                        lblDate.setText(df1.format(calobj.getTime()));
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        clock.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        HeaderLabel = new javax.swing.JLabel();
        LeftPanel = new javax.swing.JPanel();
        lblWelcome = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jDayChooser1 = new com.toedter.calendar.JDayChooser();
        RightPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pathTextTemp = new javax.swing.JTextField();
        btnBrowseTemp = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        pathTextOutput = new javax.swing.JTextField();
        btnBrowseOutput = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        splitDropDown = new javax.swing.JComboBox();
        btnBrowseSplit = new javax.swing.JButton();
        btnRefreshDB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputLog = new javax.swing.JTextArea();
        MenuPanel = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shelter Cluster");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setResizable(false);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));

        HeaderLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/header.png"))); // NOI18N

        LeftPanel.setBackground(new java.awt.Color(255, 255, 255));
        LeftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 12))); // NOI18N

        lblWelcome.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/sc_icon.png"))); // NOI18N
        lblWelcome.setPreferredSize(new java.awt.Dimension(92, 15));

        lblTime.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 51, 0));
        lblTime.setText("Time");
        lblTime.setPreferredSize(new java.awt.Dimension(92, 15));

        lblDate.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 51, 0));
        lblDate.setText("Date");
        lblDate.setPreferredSize(new java.awt.Dimension(92, 15));

        jDayChooser1.setBackground(new java.awt.Color(255, 255, 255));
        jDayChooser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout LeftPanelLayout = new javax.swing.GroupLayout(LeftPanel);
        LeftPanel.setLayout(LeftPanelLayout);
        LeftPanelLayout.setHorizontalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addComponent(jDayChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LeftPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)))
                .addGap(21, 21, 21))
        );
        LeftPanelLayout.setVerticalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDayChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        LeftPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblDate, lblTime});

        RightPanel.setBackground(new java.awt.Color(223, 222, 222));
        RightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SC IM Data Processing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 11))); // NOI18N
        RightPanel.setPreferredSize(new java.awt.Dimension(603, 389));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Select Template File");

        pathTextTemp.setText("D:\\Users\\user\\Dropbox (GSC)\\2015 Nepal EQ\\04 IM\\01 The 3Ws\\Reporting\\Template\\reportingtemplate_sheltercluster.xlsx");

        btnBrowseTemp.setText("Browse");
        btnBrowseTemp.setOpaque(false);
        btnBrowseTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTempActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Output Path");

        btnBrowseOutput.setText("Browse");
        btnBrowseOutput.setOpaque(false);
        btnBrowseOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseOutputActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Split By");

        splitDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitDropDownActionPerformed(evt);
            }
        });

        btnBrowseSplit.setText("Split");
        btnBrowseSplit.setOpaque(false);
        btnBrowseSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseSplitActionPerformed(evt);
            }
        });

        btnRefreshDB.setText("Refresh DB");
        btnRefreshDB.setOpaque(false);
        btnRefreshDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDBActionPerformed(evt);
            }
        });

        outputLog.setColumns(20);
        outputLog.setRows(5);
        jScrollPane3.setViewportView(outputLog);

        javax.swing.GroupLayout RightPanelLayout = new javax.swing.GroupLayout(RightPanel);
        RightPanel.setLayout(RightPanelLayout);
        RightPanelLayout.setHorizontalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(btnRefreshDB, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(RightPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pathTextTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBrowseTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(RightPanelLayout.createSequentialGroup()
                            .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(RightPanelLayout.createSequentialGroup()
                                    .addComponent(splitDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBrowseSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(RightPanelLayout.createSequentialGroup()
                                    .addComponent(pathTextOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnBrowseOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        RightPanelLayout.setVerticalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathTextTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pathTextOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(splitDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRefreshDB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        RightPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, pathTextTemp});

        RightPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, pathTextOutput, splitDropDown});

        MenuPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnHome.setBackground(new java.awt.Color(255, 255, 255));
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/home.png"))); // NOI18N
        btnHome.setToolTipText("Home");
        btnHome.setBorder(null);
        btnHome.setBorderPainted(false);
        btnHome.setFocusPainted(false);
        btnHome.setOpaque(false);
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/exit.png"))); // NOI18N
        btnExit.setToolTipText("Exit");
        btnExit.setBorder(null);
        btnExit.setBorderPainted(false);
        btnExit.setFocusPainted(false);
        btnExit.setOpaque(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuPanelLayout = new javax.swing.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHome)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MenuPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnHome});

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeaderLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        MainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {LeftPanel, RightPanel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(894, 597));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        dispose();
        try {
            new HomePage().setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBrowseTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTempActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setMultiSelectionEnabled(false);
        int option = jfc.showOpenDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            filePathTemplate = file.getPath();
            pathTextTemp.setText(filePathTemplate);
        } else if (option == JFileChooser.CANCEL_OPTION) {
            System.out.println(" User cancelled operation. No file was chosen.");
        }
    }//GEN-LAST:event_btnBrowseTempActionPerformed

    private void btnBrowseOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseOutputActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String selectedPath = chooser.getSelectedFile().toString();
            pathTextOutput.setText(selectedPath);
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btnBrowseOutputActionPerformed

    private void splitDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitDropDownActionPerformed

    }//GEN-LAST:event_splitDropDownActionPerformed

    private void btnBrowseSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseSplitActionPerformed
        btnBrowseSplit.setEnabled(false);
        splitBy = (String) splitDropDown.getSelectedItem();
        templateFile = pathTextTemp.getText();
        outputfilePath = pathTextOutput.getText() + "\\";

        if (!splitBy.equals("-Select-") && templateFile != "" && outputfilePath != "\\") {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            task = new Task();
//        task.addPropertyChangeListener(this);
            task.execute();
        } else {
            System.out.println("empty");
            JOptionPane.showMessageDialog(null, "Some fields are empty!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
            btnBrowseSplit.setVisible(true);
            dispose();
            try {
                new SplitFrame().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        try {
//            split(splitBy, templateFile, outputfilePath);
//        } catch (Exception ex) {
//            Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnBrowseSplitActionPerformed

    private void btnRefreshDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDBActionPerformed
        btnRefreshDB.setEnabled(false);
        try {
            // TODO add your handling code here:
            File file = new File("conf/dbColumnHeader.ini");
            if (file.delete()) {
                System.out.println(file.getName() + " is deleted!");
            } else {
                System.out.println("Delete operation is failed.");
            }
//            fillCombo();
            tDB = new TaskDB();
            tDB.execute();
        } catch (Exception ex) {
            Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshDBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new SplitFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    class Task extends SwingWorker<Void, Void> {

        /**
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() throws Exception {
            split();
            return null;
        }

        /**
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            btnBrowseSplit.setEnabled(true);
            setCursor(null); // turn off the wait cursor
        }
    }

    class TaskDB extends SwingWorker<Void, Void> {

        /**
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() throws Exception {
            fillCombo();
            return null;
        }

        /**
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
//            Toolkit.getDefaultToolkit().beep();
            btnRefreshDB.setEnabled(true);
            setCursor(null); // turn off the wait cursor
        }
    }

    private void fillCombo() throws SQLException, IOException {
        File file = new File("conf/dbColumnHeader.ini");
        // if file doesnt exists, then create it
        if (!file.exists()) {
            con = DBConnection.getConnection();
            if (con != null) {
                Statement stmt = null;
                file.createNewFile();
                System.out.println("Database Connection Established");
                stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM distributions");
                ResultSetMetaData rsmd = rs.getMetaData();
                int rowCount = rsmd.getColumnCount();
                String data[] = new String[rowCount + 1];
                data[0] = "-Select-";
//                System.out.println("Table Name : " + rsmd.getTableName(2));
//                System.out.println("Field  \tDataType");
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                for (int i = 0; i < rowCount; i++) {
                    if (i == 0) {
                        bw.write(data[i] + "\n");
                    } else {
                        data[i] = rsmd.getColumnName(i);
                        bw.write(data[i] + "\n");
                    }
//                System.out.print(rsmd.getColumnName(i + 1) + "  \t");
//                System.out.println(rsmd.getColumnTypeName(i + 1));
                }
                bw.close();
                splitDropDown.setModel(new javax.swing.DefaultComboBoxModel(data));
                con.close();
            } else {
                System.out.println("Failed to make connection!");
                JOptionPane.showMessageDialog(null, "Failed to connect to Database!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
                tDB = new TaskDB();
                tDB.execute();
            }
        } else {
            int len = (int) file.length();
            System.out.println("File size is " + len + "KB");
            if (len < 1) {
                if (file.delete()) {
                    System.out.println(file.getName() + " is deleted!");
                } else {
                    System.out.println("Delete operation is failed.");
                }
//                fillCombo();
                tDB = new TaskDB();
                tDB.execute();
            } else {
                String data[] = null;
                BufferedReader br = null;
                try {
                    String sCurrentLine;
                    br = new BufferedReader(new FileReader("conf/dbColumnHeader.ini"));
                    while ((sCurrentLine = br.readLine()) != null) {
                        splitDropDown.addItem(sCurrentLine);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (br != null) {
                            br.close();
                        }
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }
    static String filePathTemplate;
    static String filePathOutput;
    String splitBy;
    String templateFile = null;
    String outputfilePath = null;
    static Connection con;
    private Task task;
    private TaskDB tDB;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HeaderLabel;
    private javax.swing.JPanel LeftPanel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JPanel RightPanel;
    private javax.swing.JButton btnBrowseOutput;
    public javax.swing.JButton btnBrowseSplit;
    private javax.swing.JButton btnBrowseTemp;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHome;
    public javax.swing.JButton btnRefreshDB;
    private com.toedter.calendar.JDayChooser jDayChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblWelcome;
    public javax.swing.JTextArea outputLog;
    private javax.swing.JTextField pathTextOutput;
    private javax.swing.JTextField pathTextTemp;
    private javax.swing.JComboBox splitDropDown;
    // End of variables declaration//GEN-END:variables

    private void split() throws Exception {
        List<AgencyNameBean> agenciesName = new ArrayList<AgencyNameBean>();
        con = DBConnection.getConnection();
        try {
            if (con != null) {
                agenciesName = getImpAgenciesName(con, splitBy);
                System.out.println("Size of List " +agenciesName.size());
                if (agenciesName.size() > 0) {
                    for (int i = 0; i < agenciesName.size(); i++) {
                        String fname = "temp";
                        List<DistBean> distList = getDistData(con, agenciesName.get(i).toString(), splitBy);
                        List<TrainingBean> trainList = getTrainData(con, agenciesName.get(i).toString(), splitBy);
                        System.out.println("Processing : " + agenciesName.get(i).toString());
                        outputLog.append("Processing : " + agenciesName.get(i).toString());
                        outputLog.append("\n");
                        fname = agenciesName.get(i).toString().replaceAll("/", "-");
                        if (distList.size() > 0) {
                            if (trainList.isEmpty()) {
                                writeToExcle(distList, fname, templateFile, outputfilePath);
                            } else {
                                writeToExcle(distList, trainList, fname, templateFile, outputfilePath);
                            }
                        } else {
                            System.out.println("Distribution Sheet is Empty.");
                            outputLog.append("Distribution Sheet is Empty.");
                            outputLog.append("\n");
                        }
                        distList = null;
                        trainList = null;
                    }
                } else {
                    outputLog.append("Some issue in DB");
                }
                agenciesName = null;
            } else {
                System.out.println("Failed to make connection!");
                JOptionPane.showMessageDialog(null, "Failed to connect to Database!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }

    private static List<AgencyNameBean> getImpAgenciesName(Connection con, String splitBy) throws SQLException {
        List<AgencyNameBean> agenciesName = new ArrayList<AgencyNameBean>();
        Statement stmt = null;
        if (con != null) {
            System.out.println("Database Connection Established");
            stmt = con.createStatement();
//            String query = "SELECT DISTINCT imp_agency FROM " + PropertiesUtil.getDbTable();
            String query = "SELECT DISTINCT " + splitBy + " FROM " + PropertiesUtil.getDbTable();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                AgencyNameBean bean = new AgencyNameBean();
                bean.setImp_agency(rs.getString(splitBy));
                agenciesName.add(bean);
            }
            rs.close();

        } else {
            System.out.println("Failed to make connection!");
        }
        return agenciesName;
    }

    private static List<DistBean> getDistData(Connection con, String agencyName, String splitBy) {
        List<DistBean> mList = new ArrayList<DistBean>();
        PreparedStatement pstmt = null;
        try {
            String query = "SELECT *  FROM " + PropertiesUtil.getDbTable() + " WHERE " + splitBy + " = ?";
            pstmt = con.prepareStatement(query);
            pstmt.setString(1, agencyName);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                DistBean bean = new DistBean();
                //Who
                bean.setImplementingAgency(rs.getString(8));
                bean.setSourcingAgency(rs.getString(9));
                bean.setLocalPartnerAgency(rs.getString(10));
                bean.setContactName(rs.getString(11));
                bean.setContactEmail(rs.getString(12));
                bean.setContactPhoneNumber(rs.getString(13));
//
//                    //Where
                bean.setDistrict(rs.getString(14));
                bean.setVDCMunicipalities(rs.getString(15));
                bean.setMunicipalWard(rs.getString(16));
//
//                    //What
                bean.setActionType(rs.getString(17));
                bean.setActionDescription(rs.getString(18));
                bean.setTargeting(rs.getString(19));
                bean.setItems(rs.getString(20));
                bean.setTotalNumberHouseholds(rs.getString(21));
                bean.setAverageCostPerHouseholds(rs.getString(22));
                bean.setFemaleHeadedHouseholds(rs.getString(23));
                bean.setVulnerableCasteEthnicityHouseholds(rs.getString(24));

//                    //When
                bean.setActivityStatus(rs.getString(25));
                bean.setDDStart(rs.getString(26));
                bean.setMMStart(rs.getString(27));
                bean.setYYStart(rs.getString(28));
                bean.setDDComp(rs.getString(29));
                bean.setMMComp(rs.getString(30));
                bean.setYYComp(rs.getString(31));
//
                bean.setAdditionalComments(rs.getString(32));
                mList.add(bean);
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return mList;
    }

    private List<TrainingBean> getTrainData(Connection con, String agencyName, String splitBy) {
        List<TrainingBean> mList = new ArrayList<TrainingBean>();
        PreparedStatement pstmt = null;
        try {
            String query = "SELECT *  FROM " + PropertiesUtil.getDbTable1() + " WHERE " + splitBy + " = ?";
            pstmt = con.prepareStatement(query);
            pstmt.setString(1, agencyName);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                TrainingBean bean = new TrainingBean();
//                //Who
                bean.setImplementingAgency(rs.getString(8));
                bean.setSourcingAgency(rs.getString(9));
                bean.setLocalPartnerAgency(rs.getString(10));
                bean.setContactName(rs.getString(11));
                bean.setContactEmail(rs.getString(12));
                bean.setContactPhoneNumber(rs.getString(13));
//                
//               //Where
                bean.setDistrict(rs.getString(14));
                bean.setVDCMunicipalities(rs.getString(15));
                bean.setMunicipalWard(rs.getString(16));
//
//                //What
                bean.setTrainingSub(rs.getString(17));
                bean.setAudience(rs.getString(18));
                bean.setTrainingTitle(rs.getString(19));
                bean.setDemonstrationConstructionIncluded(rs.getString(20));
                bean.setIECMaterialsDistributed(rs.getString(21));
                bean.setDurationofeachsession(rs.getString(22));//in hours	
                bean.setAmountPaidtoParticipants(rs.getString(23)); //NRP per participants	
                bean.setTotalCostPerTraining(rs.getString(24));
                bean.setTotalParticipants(rs.getString(25));
                bean.setMales(rs.getString(26));
                bean.setFemales(rs.getString(27));
                bean.setThirdGender(rs.getString(28));
                bean.setElderly(rs.getString(29));//60+
                bean.setChildren(rs.getString(30));//u18	
                bean.setPersonswithDisabilities(rs.getString(31));
                bean.setVulnerableCasteorEthnicity(rs.getString(32));
                bean.setFemaleHH(rs.getString(33));
//                //When
                bean.setActivityStatus(rs.getString(34));
                bean.setDDStart(rs.getString(35));
                bean.setMMStart(rs.getString(36));
                bean.setYYStart(rs.getString(37));
                bean.setDDComp(rs.getString(38));
                bean.setMMComp(rs.getString(39));
                bean.setYYComp(rs.getString(40));

                bean.setAdditionalComments(rs.getString(41));
                mList.add(bean);
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(SplitFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return mList;
    }

    private void writeToExcle(List<DistBean> mainList, String fname, String templateFile, String outputfilePath) throws Exception {
        InputStream file = new FileInputStream(templateFile);
        Workbook workbook = WorkbookFactory.create(file);
        org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(1);
        int rowIndex = 1;
        for (DistBean bean : mainList) {
            Row row = sheet.createRow(rowIndex);
            //who
            row.createCell(0).setCellValue(bean.getImplementingAgency());
            row.createCell(1).setCellValue(bean.getSourcingAgency());
            row.createCell(2).setCellValue(bean.getLocalPartnerAgency());
            row.createCell(3).setCellValue(bean.getContactName());
            row.createCell(4).setCellValue(bean.getContactEmail());
            row.createCell(5).setCellValue(bean.getContactPhoneNumber());
            //where
            row.createCell(6).setCellValue(bean.getDistrict());
            row.createCell(7).setCellValue(bean.getVDCMunicipalities());
            row.createCell(8).setCellValue(bean.getMunicipalWard());
            //What
            row.createCell(9).setCellValue(bean.getActionType());
            row.createCell(10).setCellValue(bean.getActionDescription());
            row.createCell(11).setCellValue(bean.getTargeting());
            row.createCell(12).setCellValue(bean.getItems());
            row.createCell(13).setCellValue(bean.getTotalNumberHouseholds());
            row.createCell(14).setCellValue(bean.getAverageCostPerHouseholds());
            row.createCell(15).setCellValue(bean.getFemaleHeadedHouseholds());
            row.createCell(16).setCellValue(bean.getVulnerableCasteEthnicityHouseholds());
//                    //When
            row.createCell(17).setCellValue(bean.getActivityStatus());
            row.createCell(18).setCellValue(bean.getDDStart());
            row.createCell(19).setCellValue(bean.getMMStart());
            row.createCell(20).setCellValue(bean.getYYStart());
            row.createCell(21).setCellValue(bean.getDDComp());
            row.createCell(22).setCellValue(bean.getMMComp());
            row.createCell(23).setCellValue(bean.getYYComp());
//            row.createCell(18).setCellValue(bean.getStartDate());
//            row.createCell(19).setCellValue(bean.getCompletionDate());
            row.createCell(24).setCellValue(bean.getAdditionalComments());
            rowIndex++;
        }

        //Writing into excel file
        DateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
        Calendar cal = Calendar.getInstance();
        String todayDate = dateFormat.format(cal.getTime());

        String filePath = outputfilePath;
        File folder = new File(filePath);
        if (!folder.exists()) {
            if (folder.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
        FileOutputStream fos = new FileOutputStream(filePath + fname + " - " + todayDate + ".xlsx");
        workbook.write(fos);
        System.out.println(filePath + fname + " - " + todayDate + ".xlsx created");
        outputLog.append(fname + " - " + todayDate + ".xlsx created");
        outputLog.append("\n");
        fos.close();
    }

    private void writeToExcle(List<DistBean> distList, List<TrainingBean> trainList, String fname, String templateFile, String outputfilePath) throws Exception {
        InputStream file = new FileInputStream(templateFile);
        Workbook workbook = WorkbookFactory.create(file);
        org.apache.poi.ss.usermodel.Sheet sheet = workbook.getSheetAt(1);
        int rowIndex = 1;
        for (DistBean bean : distList) {
            Row row = sheet.createRow(rowIndex);
            //who
            row.createCell(0).setCellValue(bean.getImplementingAgency());
            row.createCell(1).setCellValue(bean.getSourcingAgency());
            row.createCell(2).setCellValue(bean.getLocalPartnerAgency());
            row.createCell(3).setCellValue(bean.getContactName());
            row.createCell(4).setCellValue(bean.getContactEmail());
            row.createCell(5).setCellValue(bean.getContactPhoneNumber());
            //where
            row.createCell(6).setCellValue(bean.getDistrict());
            row.createCell(7).setCellValue(bean.getVDCMunicipalities());
            row.createCell(8).setCellValue(bean.getMunicipalWard());
            //What
            row.createCell(9).setCellValue(bean.getActionType());
            row.createCell(10).setCellValue(bean.getActionDescription());
            row.createCell(11).setCellValue(bean.getTargeting());
            row.createCell(12).setCellValue(bean.getItems());
            row.createCell(13).setCellValue(bean.getTotalNumberHouseholds());
            row.createCell(14).setCellValue(bean.getAverageCostPerHouseholds());
            row.createCell(15).setCellValue(bean.getFemaleHeadedHouseholds());
            row.createCell(16).setCellValue(bean.getVulnerableCasteEthnicityHouseholds());
//                    //When
            row.createCell(17).setCellValue(bean.getActivityStatus());
//            row.createCell(18).setCellValue(bean.getStartDate());
//            row.createCell(19).setCellValue(bean.getCompletionDate());
//            row.createCell(20).setCellValue(bean.getAdditionalComments());
            row.createCell(18).setCellValue(bean.getDDStart());
            row.createCell(19).setCellValue(bean.getMMStart());
            row.createCell(20).setCellValue(bean.getYYStart());
            row.createCell(21).setCellValue(bean.getDDComp());
            row.createCell(22).setCellValue(bean.getMMComp());
            row.createCell(23).setCellValue(bean.getYYComp());
            row.createCell(24).setCellValue(bean.getAdditionalComments());
            rowIndex++;
        }
        //Trainings
        org.apache.poi.ss.usermodel.Sheet sheetT = workbook.getSheetAt(2);
        rowIndex = 1;
        for (TrainingBean bean : trainList) {
            Row row = sheetT.createRow(rowIndex);
////            //who
            row.createCell(0).setCellValue(bean.getImplementingAgency());
            row.createCell(1).setCellValue(bean.getSourcingAgency());
            row.createCell(2).setCellValue(bean.getLocalPartnerAgency());
            row.createCell(3).setCellValue(bean.getContactName());
            row.createCell(4).setCellValue(bean.getContactEmail());
            row.createCell(5).setCellValue(bean.getContactPhoneNumber());
////            //where
            row.createCell(6).setCellValue(bean.getDistrict());
            row.createCell(7).setCellValue(bean.getVDCMunicipalities());
            row.createCell(8).setCellValue(bean.getMunicipalWard());
////            //What
            row.createCell(9).setCellValue(bean.getTrainingSub());
            row.createCell(10).setCellValue(bean.getAudience());
            row.createCell(11).setCellValue(bean.getTrainingTitle());
            row.createCell(12).setCellValue(bean.getDemonstrationConstructionIncluded());
            row.createCell(13).setCellValue(bean.getIECMaterialsDistributed());
            row.createCell(14).setCellValue(bean.getDurationofeachsession());
            row.createCell(15).setCellValue(bean.getAmountPaidtoParticipants());
            row.createCell(16).setCellValue(bean.getTotalCostPerTraining());
            row.createCell(17).setCellValue(bean.getTotalParticipants());
            row.createCell(18).setCellValue(bean.getMales());
            row.createCell(19).setCellValue(bean.getFemales());
            row.createCell(20).setCellValue(bean.getThirdGender());
            row.createCell(21).setCellValue(bean.getElderly());
            row.createCell(22).setCellValue(bean.getChildren());
            row.createCell(23).setCellValue(bean.getPersonswithDisabilities());
            row.createCell(24).setCellValue(bean.getVulnerableCasteorEthnicity());
            row.createCell(25).setCellValue(bean.getFemaleHH());
////                    //When
            row.createCell(26).setCellValue(bean.getActivityStatus());
            row.createCell(27).setCellValue(bean.getDDStart());
            row.createCell(28).setCellValue(bean.getMMStart());
            row.createCell(29).setCellValue(bean.getYYStart());
            row.createCell(30).setCellValue(bean.getDDComp());
            row.createCell(31).setCellValue(bean.getMMComp());
            row.createCell(32).setCellValue(bean.getYYComp());
            row.createCell(33).setCellValue(bean.getAdditionalComments());
            rowIndex++;
        }

        //Writing into excel file
        DateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
        Calendar cal = Calendar.getInstance();
        String todayDate = dateFormat.format(cal.getTime());

        String filePath = outputfilePath;
        File folder = new File(filePath);
        if (!folder.exists()) {
            if (folder.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
        FileOutputStream fos = new FileOutputStream(filePath + fname + " - " + todayDate + ".xlsx");
        workbook.write(fos);
        System.out.println(filePath + fname + " - " + todayDate + ".xlsx created");
        outputLog.append(fname + " - " + todayDate + ".xlsx created");
        outputLog.append("\n");
        fos.close();
    }
}
