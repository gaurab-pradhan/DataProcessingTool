/**
 *
 * @author Gaurab Pradhan
 */
package SC_IM_DP;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import util.DBConnection;

public class Splash extends javax.swing.JFrame {

    String name;

    public Splash() {
        initComponents();
        task = new Task();
        task.execute();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shelter Cluster");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/sc_icon.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        jLabel2.setText("Connecting to Database Server");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SC_IM_DP/Images/loading.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)))
                        .addGap(86, 86, 86))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(196, 196, 196))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(464, 309));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Splash().setVisible(true);
            }
        });
    }
    class Task extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() throws Exception {
            fillCombo();
            return null;
        }
        @Override
        public void done() {
            setCursor(null); // turn off the wait cursor
        }
    }
     private void fillCombo() throws SQLException, IOException {
        File file = new File("conf/dbColumnHeader.ini");
        // if file doesnt exists, then create it
        if (!file.exists()) {
            con = DBConnection.getConnection();
            if (con != null) {
                Statement stmt = null;
                file.createNewFile();
                System.out.println("Database Connection Established");
                stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM distributions");
                ResultSetMetaData rsmd = rs.getMetaData();
                int rowCount = rsmd.getColumnCount();
                String data[] = new String[rowCount + 1];
                data[0] = "-Select-";
//                System.out.println("Table Name : " + rsmd.getTableName(2));
//                System.out.println("Field  \tDataType");
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                for (int i = 0; i < rowCount; i++) {
                    if (i == 0) {
                        bw.write(data[i] + "\n");
                    } else {
                        data[i] = rsmd.getColumnName(i);
                        bw.write(data[i] + "\n");
                    }
//                System.out.print(rsmd.getColumnName(i + 1) + "  \t");
//                System.out.println(rsmd.getColumnTypeName(i + 1));
                }
                bw.close();
//                splitDropDown.setModel(new javax.swing.DefaultComboBoxModel(data));
                con.close();
                dispose();
                new HomePage().setVisible(true);
            } else {
                System.out.println("Failed to make connection!");
                JOptionPane.showMessageDialog(null, "Failed to connect to Database!!!", "SC IM Data Processing", JOptionPane.PLAIN_MESSAGE);
//                fillCombo();
            }
        } else {
            int len = (int) file.length();
            System.out.println("File size is " + len + "KB");
            if (len < 1) {
                if (file.delete()) {
                    System.out.println(file.getName() + " is deleted!");
                } else {
                    System.out.println("Delete operation is failed.");
                }
                fillCombo();
            } else {
                dispose();
                new HomePage().setVisible(true);
            }
        }
    }
    private Task task;
    Connection con = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}